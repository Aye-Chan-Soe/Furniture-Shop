generator client {
  provider     = "prisma-client-js"
  output       = "../generated/prisma"
  moduleFormat = "esm"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique @db.VarChar(52)
  posts    Post[]
  products Product[]
}

model Order {
  id             Int              @id @default(autoincrement())
  userId         Int
  code           String           @db.VarChar(15)
  totalPrice     Decimal          @db.Decimal(10, 2)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  User           User             @relation(fields: [userId], references: [id])
  products ProductOnOrder[]
}

model Otp {
  id            Int      @id @default(autoincrement())
  phone         String   @unique @db.VarChar(15)
  otp           String 
  rememberToken String
  verifyToken   String?
  count         Int      @default(0) @db.SmallInt
  error         Int      @default(0) @db.SmallInt
  createdAt     DateTime @default(now())
  updatedAt     DateTime  @updatedAt
}

model Post {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  title      String   @db.VarChar(255)
  content    String
  authorId   Int
  body       String
  categoryId Int
  image      String
  typeId     Int
  author       User     @relation(fields: [authorId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  type       Type     @relation(fields: [typeId], references: [id])
  tags  PostTag[]
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  description    String
  price          Decimal          @db.Decimal(10, 2)
  discount       Decimal          @default(0) @db.Decimal(10, 2)
  rating         Int              @default(0) @db.SmallInt
  inventory      Int              @default(0)
  status         Status           @default(ACTIVE)
  categoryId     Int
  typeId         Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  category       Category         @relation(fields: [categoryId], references: [id])
  type           Type             @relation(fields: [typeId], references: [id])
  orders ProductOnOrder[]
  image          image[]
  tags ProductTag[]
}

model ProductOnOrder {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int     @db.SmallInt
  price     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model PostTag {
  id       Int        @id @default(autoincrement())
  name     String     @unique @db.VarChar(52)
  posts Post[]
 }

 model ProductTag {
  id       Int        @id @default(autoincrement())
  name     String     @unique @db.VarChar(52)
  products Product[]
 }


// model Tag {
//   id       Int        @id @default(autoincrement())
//   name     String     @unique @db.VarChar(52)
//   tags Taggable[]
// }

// model Taggable {
//   id     Int    @id @default(autoincrement())
//   tagId  Int
//   type   String @db.VarChar(7)
//   typeId Int
//   tag    Tag    @relation(fields: [tagId], references: [id])
// }

model Type {
  id      Int       @id @default(autoincrement())
  name    String    @unique @db.VarChar(52)
  Post    Post[]
  products Product[]
}

model User {
  id              Int       @id @default(autoincrement())
  email           String?   @unique @db.VarChar(52)
  createdAt       DateTime  @default(now())
  errorLoginCount Int       @default(0) @db.SmallInt
  firstName       String?   @db.VarChar(52)
  image           String?
  lastLogin       DateTime?
  lastName        String?   @db.VarChar(52)
  password        String
  phone           String    @unique @db.VarChar(15)
  randomToken     String
  role            Role      @default(USER)
  status          Status    @default(ACTIVE)
  updatedAt       DateTime  @updatedAt
  orders           Order[]
  posts            Post[]
}

model image {
  id        Int     @id @default(autoincrement())
  path      String  @db.VarChar(255)
  productId Int
  Product   Product @relation(fields: [productId], references: [id])
}

enum Role {
  USER
  ADMIN
  AUTHOR
}

enum Status {
  ACTIVE
  INACTIVE
  FREEZE
}

model Setting{
  id          Int      @id @default(autoincrement())
  key         String   @unique @db.VarChar(52)
  value       String   @db.VarChar(255)
}
